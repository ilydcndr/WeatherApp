{"version":3,"sources":["Components/InputComp.js","Components/WeatherComp.js","App.js","serviceWorker.js","index.js"],"names":["InputComp","props","Form","className","Input","type","name","value","valueCity","id","placeholder","onChange","e","saveValue","valueCountry","Button","color","onClick","search","Weather","weatherValues","class","icon","aveDeg","minDeg","maxDeg","desc","location","getTime","initialSearch","App","getIcons","setState","weatherIcon","Thunderstorm","Drizzle","Rain","Snow","Atmosphere","Clear","Clouds","x","target","charAt","toUpperCase","slice","toLowerCase","console","log","state","length","alertify","setTimeout","API","fetch","then","response","ok","json","data","weather","description","Math","round","main","temp","temp_min","temp_max","d","Date","dayNumber","getDate","month","getMonth","year","getFullYear","day","getDay","undefined","this","WeatherComp","Component","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ec52c373.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Form,Input, Button } from 'reactstrap';\r\nimport './InputComp.css'\r\n\r\n function InputComp(props) {\r\n        return (\r\n            <div>\r\n                <div></div>\r\n                <Form className=\"row justify-content-center \">\r\n                   <Input className=\"col-4 mt-5 mr-2\" type=\"text\" name=\"city\" value={props.valueCity} id=\"city\" placeholder=\"City\" onChange={(e)=>{props.saveValue(e,'city')}} />\r\n                   <Input className=\"col-4 mt-5 ml-2\" type=\"text\" name=\"country\" value={props.valueCountry}  id=\"country\" placeholder=\"Country\" onChange={(e)=>{props.saveValue(e,'country')}} />\r\n                </Form>\r\n                <div className=\"row justify-content-center mt-3 \">\r\n                <Button  color=\"primary\" onClick={()=>{props.search()}}>Search</Button>\r\n                </div> \r\n            </div>\r\n        )\r\n    \r\n}\r\n\r\nexport default InputComp;\r\n","import React from \"react\";\r\n\r\nfunction Weather(props) {\r\n\r\n  const weatherValues = (\r\n    <div className=\"text-center\">\r\n      <i class={`wi ${props.icon} display-2`}></i>\r\n      <h5 className=\"mt-3\"></h5>\r\n      <h5>{props.aveDeg}&deg;</h5>\r\n      <h5>{props.minDeg}&deg; {props.maxDeg}&deg;</h5>\r\n      <h5>{props.desc}</h5>\r\n      <h5>{props.location}</h5>\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      <h5 className=\"text-center mt-3\">{props.getTime()}</h5>\r\n      {props.initialSearch ? weatherValues :null}\r\n    </div>\r\n  );\r\n}\r\nexport default Weather;\r\n","import React, { Component } from \"react\";\nimport InputComp from \"./Components/InputComp\";\nimport WeatherComp from \"./Components/WeatherComp\";\nimport \"./App.css\";\nimport \"../node_modules/weather-icons/css/weather-icons.css\";\nimport * as alertify from \"alertifyjs\";\n\nconst API_Key = \"9ce4bf627d054fa1d54a5bddcbe59920\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      valueCity: \"\",\n      valueCountry: \"\",\n      location: \"\",\n      description: \"\",\n      maxDeg: 0,\n      minDeg: 0,\n      aveDeg: 0,\n      initialSearch: false,\n      icon: undefined\n    };\n\n    this.weatherIcon = {\n      Thunderstorm: \"wi-thunderstorm\",\n      Drizzle: \"wi-sleet\",\n      Rain: \"wi-storm-showers\",\n      Snow: \"wi-snow\",\n      Atmosphere: \"wi-fog\",\n      Clear: \"wi-day-sunny\",\n      Clouds: \"wi-day-fog\"\n    };\n  }\n\n  getIcons = id => {\n    if (id >= 200 && id <= 232) {\n      this.setState({\n        icon: this.weatherIcon.Thunderstorm\n      });\n    } else if (id >= 300 && id <= 321) {\n      this.setState({\n        icon: this.weatherIcon.Drizzle\n      });\n    } else if (id >= 500 && id <= 531) {\n      this.setState({\n        icon: this.weatherIcon.Rain\n      });\n    } else if (id >= 600 && id <= 622) {\n      this.setState({\n        icon: this.weatherIcon.Snow\n      });\n    } else if (id >= 701 && id <= 781) {\n      this.setState({\n        icon: this.weatherIcon.Atmosphere\n      });\n    } else if (id === 800) {\n      this.setState({\n        icon: this.weatherIcon.Clear\n      });\n    } else if (id >= 801 && id <= 804) {\n      this.setState({\n        icon: this.weatherIcon.Clouds\n      });\n    } else\n      this.setState({\n        icon: this.weatherIcon.Clouds\n      });\n  };\n\n  saveValue = (e, x) => {\n    if (x === \"city\") {\n      this.setState({\n        valueCity: e.target.value.charAt(0).toUpperCase()+ e.target.value.slice(1).toLowerCase()\n      });\n    }\n    if (x === \"country\") {\n      this.setState(\n        {\n          valueCountry: e.target.value.charAt(0).toUpperCase()+ e.target.value.slice(1).toLowerCase()\n        },\n        () => {\n          console.log(this.state.valueCountry);\n        }\n      );\n    }\n  };\n\n  search = () => {\n    if (\n      this.state.valueCity.length === 0 ||\n      this.state.valueCountry.length === 0\n    ) {\n      alertify.confirm(\n        \"Warning!\",\n        \"Please Be Sure All Inputs Are Filled\",\n        function() {\n          alertify.success(\"Ok\");\n        },\n        function() {\n          alertify.error(\"Cancel\");\n        }\n      );\n    } else {\n      this.setState(\n        {\n          location: `${this.state.valueCity},${this.state.valueCountry}`\n        },\n        () => {\n          console.log(this.state.location);\n        }\n      );\n      setTimeout(() => {\n        this.setState({\n          valueCity: \"\",\n          valueCountry: \"\"\n        });\n      }, 1);\n\n      let API = `https://api.openweathermap.org/data/2.5/weather?q=${this.state.valueCity},${this.state.valueCountry}&appid=${API_Key}`;\n      fetch(API).then(response => {\n        if (!response.ok) {\n          alertify.confirm(\n            \"Warning!\",\n            \"Please Enter Valid Location\",\n            function() {\n              alertify.success(\"Ok\");\n            },\n            function() {\n              alertify.error(\"Cancel\");\n            }\n          );\n        } else {\n          response.json().then(data => {\n            console.log(data);\n            this.getIcons(data.weather[0].id);\n            this.setState({\n              initialSearch: true,\n              description: data.weather[0].description,\n              aveDeg: Math.round(data.main.temp - 273.15),\n              minDeg: Math.round(data.main.temp_min - 273.15),\n              maxDeg: Math.round(data.main.temp_max - 273.15)\n            });\n          });\n        }\n      });\n    }\n  };\n\n  getTime = () => {\n    const d = new Date();\n    const dayNumber = d.getDate();\n    const month = d.getMonth();\n    const year = d.getFullYear();\n    const day = d.getDay();\n    const array = [\n      \"Sunday\",\n      \"Monday\",\n      \"Tuesday\",\n      \"Wednesday\",\n      \"Thursday\",\n      \"Friday\",\n      \"Saturday\"\n    ];\n    const getDay = array[day];\n    return `${getDay},  ${dayNumber}.${month}.${year} `;\n  };\n\n  // componentDidMount(){\n  //   setInterval(() => {\n  //     this.getHours()\n  //   }, 1);\n  // }\n\n  // getHours=()=>{\n  //   const d = new Date()\n  //   const s=d.getHours();\n  //   const m= d.getMinutes()\n  //   const sn=d.getSeconds()\n  //   return(\n  //     `${s}:${m}:${sn}`\n  //   )\n  // }\n\n  render() {\n    return (\n      <div>\n        {/* <h5 className=\"text-right mt-3 mr-5\">{this.getHours()}</h5> */}\n        <InputComp\n          saveValue={this.saveValue}\n          search={this.search}\n          valueCity={this.state.valueCity}\n          valueCountry={this.state.valueCountry}\n        />\n        <WeatherComp\n          icon={this.state.icon}\n          getTime={this.getTime}\n          location={this.state.location}\n          initialSearch={this.state.initialSearch}\n          aveDeg={this.state.aveDeg}\n          minDeg={this.state.minDeg}\n          maxDeg={this.state.maxDeg}\n          desc={this.state.description}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css'\nimport \"alertifyjs/build/css/alertify.min.css\"\n\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below.Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}